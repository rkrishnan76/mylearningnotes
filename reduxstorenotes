In order to create a store, you pass a 






r function to Redux’s createStore() method as the first argument. What’s returned from createStore() is the store itself, which has three properties on it:

getState()
dispatch()
subscribe()
getState()
store.getState() doesn’t take any arguments and will return the current state of the store.
dispatch()
store.dispatch(action) takes in an action object and will call the reducer function, passing it the current state and the action which was dispatched. For example:

// store.js

import { createStore } from 'redux';
import reducer from '../reducers/reducer';

let store = createStore(reducer);

const receiveComment = comment => ({
  type: 'RECEIVE_COMMENT',
  comment
});

export default store;
store.getState(); // []
store.dispatch(receiveComment('Redux is great!'));
store.getState(); // ['Redux is great!']
subscribe()
store.subscribe(cb) takes in a listener callback function that will be invoked whenever the state of the store changes.

What is true about the store in Redux? Select all that apply.
Updates to the store can only be triggered by dispatching actions
The store's subscribe() function helps connect React components to the store
--------------------------
create a reducer that sets the uer array to []
call createstore(reducer)
store.dispatch(adduser)
result=store.getstate
list displays new user
--------------------------
Provider is really just a React component that we use to wrap the entire application. It takes in the store as a prop, then sets the store context, passing it down to all its subcomponents. All components wrapped by Provider will receive the store context
-----------------
Provider makes it possible for Redux to pass data from the store to any React components that need it. It uses React’s context feature to make this work.

Components that need access to the store, however, still need a way to “connect” to it. We mentioned the connect() function earlier, which utilizes a technique in functional programming called currying. Before we see connect() in action, let’s take a closer look at how currying works!
-------------
Currying

Here we have a simple plate() function which takes in two arguments: avegetable and a fruit.

function plate(vegetables, fruit) {
  return `I ate a plate of ${vegetables} and ${fruit}!`;
}

plate('corn', 'apples');
Now say that for whatever reason we want to delay getting the fruit until a later point. One way we could achieve this would be to return a function which accepts the fruit that can be invoked at a later point.

function plate(vegetables) {
  return function fruitFunc (fruit) {
    return `I ate a plate of ${vegetables} and ${fruit}!`;
  }
}

const fruitFunc = plate('corn');
Now we have a fruitFunc() that we can call, pass it a fruit, and the vegetables (corn) are still accessible via closures.

Another way to write this without the delay would be like this:

function plate(vegetables) {
  return function fruitFunc (fruit) {
    return `I ate a plate of ${vegetables} and ${fruit}!`;
  }
}

const sentence = plate('corn')('apples');
It may take a second for your brain to wrap your head around that double invocation, but try to break it down into steps. When you call the plate function, that returns the fruitFunc(), which is then invoked and passed “apples”. This technique is used in functional programming (as well as Redux) and is called currying (also partial application).
------------------------
Currying is the process of partially providing the input to a function that requires additional data. The part of the Redux API that uses currying is its connect() method. Let's take a look!

----------------
connect() is a function that makes it possible for a component to get both state and dispatch from the Redux store. Its signature is interesting. Fully used, it looks like this:

connect(mapStateToProps, mapDispatchToProps)(MyComponent)
As a preview, MyComponent is the component you want to receive store state, dispatch, or both. mapStateToProps() is a function that receives the current store, current props, and what it returns will be available to MyComponent as props. mapDispatchToProps() allows you wrap action creators inside of dispatch. Let's take a closer look at each of them!
-----------------------
mapStateToProps()
mapStateToProps() allows you to specify which data from the store you want passed to your React component. It takes in the store's state, an optional ownprops argument, and returns an object. Check out its complete signature:

mapStateToProps(state, [ownProps])
As stated in the Redux docs:

“If this argument is specified, the new component will subscribe to Redux store updates. This means that any time the store is updated, mapStateToProps will be called. The results of mapStateToProps must be a plain object, which will be merged into the component’s props.”
In other words: the properties of the object returned from mapStateToProps() will be passed to the component as props! You can think of mapStateToProps() as just a function that lets connect() know how to map specific parts of the store’s state into usable props.

Consider the following example:

import { connect } from 'react-redux';

const User = ({ name, age }) => {
  // ...
};

const mapStateToProps = (state, props) => ({
  name: state.user.name,
  age: state.user.age
});

export default connect(mapStateToProps)(User);
In the above example, both name and age will be available as props for the User component to access.
---------------------------
mapStateToProps()'s optional argument, ownProps, gives us access to props passed into a connected component. Let's say we have a component with props passed directly down from a parent component:

<ConnectedComponent firstName={'Harper'} lastName={'Lee'} />
These props can be merged along with other portions of state through ownProps:

const mapStateToProps = (state, ownProps) => ({
  occupation: state.occupation,
  userInfo: `${ownProps.firstName} ${ownProps.lastName}: ${state.occupation}.`
});

export default connect(mapStateToProps)(MyComponent);
A great place to use ownProps is when filtering some data. Let's say we want to build a component MyPhotos that, upon login, renders an index of all the user's photos. The logged-in user is stored in another location in the application, and is passed down to the MyPhotos component as a prop. We can then leverage ownProps to access and display only what we need:

const mapStateToProps = (state, ownProps) => ({
  photos: state.photos.filter(photo => photo.user === ownProps.user)
});

export default connect(mapStateToProps)(MyPhotos);
This way, we can quickly pass in a prop to a component (e.g., user) and return all of the photos authored by that user from the store's state.
-----------
combineReducers() takes in an object as an argument
combineReducers() returns a single reducer that can be used to create the store
-----------------------
QUESTION 3 OF 3

What will ContactForm receive as props?

const ContactForm = ({ firstName, handleAdd }) => (<div>...</div>);

const mapStateToProps = state => ({
  fullName: state.name
});

const mapDispatchToProps = dispatch => ({
  handleAdd: contact => dispatch(addContact(contact))
});

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(ContactForm);

Anser:
fullName & handleAdd


--------------------------
We've separated our reducers to handle distinct, independent slices of state. This process is called reducer composition. However, we now have a problem: Redux’s createStore() method only accepts one reducer! In order to create a valid store, we still need to figure out a way to combine both of these reducers together into one reducer.
---------------------------


Thunks:
-------------------------
Revisiting the previous example:

export const fetchTodos = () => dispatch => (
  TodoAPIUtil
      .fetchTodos()
      .then(todos => dispatch(receiveTodos(todos)))
);
We expect the API request to occur first. TodoAPIUtil.fetchTodos() needs to be resolved before anything else can be done. Once the request is resolved, thunk middleware then invokes the function with dispatch(). Keep in mind: the action is ever only dispatched after the API request is resolved.







------------
Organizing the Directory Structure of a Redux Application
Aside from using middleware, we can also enhance our app in perhaps a more ancillary manner by choosing how we structure our file paths. After all, there are many moving parts and dependencies when it comes to Redux apps -- actions, reducers, the store, components, API utilities -- the list goes on.

By consciously thinking about how we organize our app’s assets, not only can we make it easier to find files we’re looking for, we can also make it easier to move things around (i.e., modularity). Here are two great ways that you can organize the directory structure when building Redux apps:

Organization by Capability ("Type")
Frontend
   - Components
      - component1.js
      - component2.js
      - component3.js
   - Actions
      - action1.js
      - action2.js
   - Reducers
      - reducer1.js
   - Util
   - Store
By organizing by capability, we know exactly where to look for certain assets: any action will be found in the Actions folder, any reducer will be found in Reducers, and so on. In fact, the “real world” example from Redux on GitHub structures the app this very way. Under this directory structure, if we wanted to import all actions into a component, we can get them all in a single import!

Organization by Feature
If we need to make any changes, however, things might get tricky. What if a particular component’s requirements change? We’d have to manually look for that component’s related assets (actions, reducers, etc.) all in separate locations to make the necessary changes. An alternative way to structure the same application, then, is by feature:

- nav
   - actions.js
   - index.js
   - reducer.js

- dashboard
   - actions.js
   - index.js
   - reducer.js
This form of organization groups assets by their common “feature,” or “concept.” That is, all assets related to a navigation component are all together in a single, modular folder. It’s a great way to visually express what the application is all about, though if the app contains several hundred components, it can become more difficult to navigate through.

Ultimately, the choice is yours. Whatever way you choose to organize your directory structure, just be sure that it’s something that makes sense for your app, and it’s something you’re comfortable with!
App Structure and Organization Recap
The two most popular ways to organize a Redux application are by:

Capability, in which all actions in an "Actions" folder, all reducers in a "Reducers" folder, etc.
Feature, in which, say, a "Sidebar" folder includes a file for all of the Sidebar's actions, a file for all of the Sidebar's reducers, etc.
All in all, there is no "right way" to split things up, though there are conventions we can practice to help manage the complexity of Redux. Considering the features, scale, and dependencies in your app, feel free to choose whichever structure makes the most sense.

The official React/Redux Community on GitHub:https://github.com/reactjs
The “Awesome list of Redux examples and middlewares” on GitHub:https://github.com/xgrommx/awesome-redux
Redux Examples from the Redux docs:http://redux.js.org/docs/introduction/Examples.html
